#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
Outputs a fully inflected version of a lemmatized test set (provided on STDIN)
If training data is provided, it will use a unigram model to select the form.

usage: cat LEMMA_FILE | python inflect
       [-t TRAINING_PREFIX] [-l LEMMA_SUFFIX] [-w WORD_SUFFIX]
"""

import argparse
import codecs
import sys
import os
from collections import defaultdict
from itertools import izip


PARSER = argparse.ArgumentParser(description="Inflect a lemmatized corpus")
PARSER.add_argument("-t", type=str, 
                    default="data/train", 
                    help="training prefix")
PARSER.add_argument("-l", type=str, 
                    default="lemma", 
                    help="lemma file suffix")
PARSER.add_argument("-w", type=str, 
                    default="form", 
                    help="word file suffix")
PARSER.add_argument("-p", type=str, 
                    default="form", 
                    help="POS file suffix")
args = PARSER.parse_args()

# Python sucks at UTF-8
sys.stdout = codecs.getwriter('utf-8')(sys.stdout) 
sys.stdin = codecs.getreader('utf-8')(sys.stdin) 


# LEMMAS schema correlates (lemma, part of speech) â†’ (word)
POS_LEMMAS = defaultdict(defaultdict)
LEMMAS = defaultdict(defaultdict)
NGS = defaultdict(defaultdict)
NGRAM_LENGTH = 5


def inflections(lemma):
    # If it exists in LEMMAS,
    if LEMMAS.has_key(lemma):
        return sorted(
            LEMMAS[lemma].keys(),
            lambda x,y: cmp(LEMMAS[lemma][y], LEMMAS[lemma][x])
        )
    # Otherwise, just return it in its own array, we've never seen it before
    return [lemma]


def get_best_inf_using_pos(lemma):
    """
    Returns the best inflection for a lemma
    """
    if POS_LEMMAS.has_key(lemma):
        return sorted(
            LEMMAS[lemma].keys(),
            lambda x,y: cmp(
                POS_LEMMAS[lemma][y],
                POS_LEMMAS[lemma][x]
            )
        )
    # Otherwise, just return it in its own array, we've never seen it before
    return [lemma]


def best_inflection(lemma):
    """
    The best_inflection function that comes from the original implementation.
    """
    return inflections(lemma)[0]


def best_inflection_use_pos(lemma):
    """
    Uses the best_inflection code as it existed in the original implementation
    but adds some further knowledge about part of speech, as per the homework
    suggestions.
    """
    return get_best_inf_using_pos(lemma)[0]


def best_inflection_ngrams(lemma, prior):
    """
    Checks for which word best represents a lemma, weighting by which occurs
    most commonly in the priors tuple.
    """
    if not NGS.has_key(lemma):
        return best_inflection(lemma)
    def _score_ngram(tup):
        return tup[1] + 100 * len(set(tup[0][:-1]).intersection(prior))

    maxval = max(NGS[lemma].iteritems(), key=_score_ngram)[0][-1]
    return maxval


def inflect_runner(data, fn=best_inflection):
    """
    Run the actual best-inflection checker. Pass functions into `fns` with a
    weight, in the form (function_name, weight) in order to run a very simple
    consensus combination.
    """
    results = []
    for line in data:
        sent = []
        for i in range(len(line)):
            sent.append(fn(line[i], line[:i][-NGRAM_LENGTH:]))
        results.append(' '.join(sent))
    return results

if __name__ == '__main__':
    in_sents = [line.rstrip().split() for line in sys.stdin.readlines()]


    def combine(a, b): return '%s.%s' % (a, b)
    def utf8read(file): return codecs.open(file, 'r', 'utf-8')

    # Build the LEMMAS hash, a two-level dictionary mapping lemmas+POS
    # to inflections to counts
    word_lemma_pos_iter = izip(
        utf8read(combine(args.t, args.p)),
        utf8read(combine(args.t, args.w)),
        utf8read(combine(args.t, args.l))
    )
    priors = []
    for parts, words, lemmas in word_lemma_pos_iter:
        lemma_pos_iter = izip(
            parts.rstrip().lower().split(),
            words.rstrip().lower().split(),
            lemmas.rstrip().lower().split()
        )

        for part, word, lemma in lemma_pos_iter:
            LEMMAS[lemma][word] = LEMMAS[lemma].get(word, 0) + 1
            if not POS_LEMMAS.has_key(lemma):
                POS_LEMMAS[lemma] = defaultdict(defaultdict)
            POS_LEMMAS[lemma][(part, word)] = POS_LEMMAS[lemma].get((part, word), 0) + 1

        if len(priors) > NGRAM_LENGTH: priors.pop(0)
        priors.append(word)
        for i in range(NGRAM_LENGTH):
            NGS[lemma][tuple(priors[NGRAM_LENGTH:])] = NGS[lemma].get(tuple(priors[NGRAM_LENGTH:]), 0) + 1

    # Use inflect_runner to choose the best inflection. See writeup for
    # further usage details.
    results = inflect_runner(in_sents, fn=best_inflection_ngrams)
    #results = inflect_runner(in_sents, fn=best_inflection_use_pos)

    for r in results:
        print r

